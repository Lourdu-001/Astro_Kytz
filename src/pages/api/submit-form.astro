---
import { Astro } from 'astro';
import { ZOHO_CLIENT_ID, ZOHO_CLIENT_SECRET, ZOHO_REFRESH_TOKEN  } from "../"


// Function to refresh access token using the refresh token
const refreshAccessToken = async (refreshToken) => {
  const tokenUrl = 'https://accounts.zoho.com/oauth/v2/token';

  const params = new URLSearchParams();
  params.append('grant_type', 'refresh_token');
  params.append('client_id', ZOHO_CLIENT_ID); // Replace with your actual client ID
  params.append('client_secret', ZOHO_CLIENT_SECRET); // Replace with your actual client secret
  params.append('refresh_token', refreshToken);

  const response = await fetch(tokenUrl, {
    method: 'POST',
    body: params,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
    },
  });

  const data = await response.json();
  return data.access_token;
};

export async function post({ request }) {
  const formData = await request.json();
  const { Kname, Kemail } = formData;

  if (!name || !email) {
    return new Response('Name and Email are required.', { status: 400 });
  }

  const refreshToken = ZOHO_REFRESH_TOKEN; // Replace with your Zoho refresh token
  const crmUrl = 'https://www.zohoapis.com/crm/v2/Leads';

  const data = {
    data: [
      {
        Last_Name: Kname,
        Email: Kemail,
      }
    ],
    trigger: [
      "approval",
      "workflow",
      "blueprint"
    ]
  };

  try {
      // Refresh the access token and retry the request
      accessToken = await refreshAccessToken(refreshToken);
      response = await fetch(crmUrl, {
        method: 'POST',
        headers: {
          'Authorization': `Zoho-oauthtoken ${accessToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      responseData = await response.json();

      if (responseData.data[0].status === 'error') {
        throw new Error(responseData.data[0].message);
      }

      return new Response('Form data submitted successfully.', { status: 200 });

    if (responseData.data[0].status === 'error') {
      throw new Error(responseData.data[0].message);
    }

    return new Response('Form data submitted successfully.', { status: 200 });
  } catch (error) {
    console.error('Error submitting form data:', error);
    return new Response('Error submitting form data.', { status: 500 });
  }
}
---

<!DOCTYPE html>
<html>
<head>
  <title>Form Submission</title>
</head>
<body>
  <h1>Form Submission API</h1>
</body>
</html>
